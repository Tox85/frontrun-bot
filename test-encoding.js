const { extractBaseFromNotice } = require('./dist/utils/extractBase');

// Test avec le texte corrompu de l'API
const corruptedText = '√Ω√ú‚ñë(WOO) √õ‚ñí‚ñë√ô√ó√ø√Ω¬£√°√Ω√ò√ø√Ω√≥√†√ô¬¨¬Æ √Ω¬∫√á√Ω√°√≤ √ù√≤‚î§√Ω√°¬£';
const corruptedBio = '√ô‚ñë√∂√Ω√ò‚î§√Ω√ø√± √ù√∂√§√ô√≠¬£√ù√•√°√Ω¬¢¬£(BIO) √Ω√™¬£√Ω√ó√†√õ¬©√™ & √Ω√™¬£√ô¬∫√±√ô√Ö√§ √Ω√π√â√Ω√ª‚î§√ô√¥¬£√ô√ó√¨ √Ω√ò‚î§√ô‚ñì√±√ù√®¬©';

// Test avec le texte normal
const normalText = 'Í∞ÄÏÉÅÏûêÏÇ∞(WOO) ÏõêÌôî ÎßàÏºì ÏÉÅÏû•';
const normalBio = 'Í∞ÄÏÉÅÏûêÏÇ∞(BIO) ÏõêÌôî ÎßàÏºì ÏÉÅÏû•';

console.log('=== TEST ENCODING BITHUMB API ===\n');

console.log('1. TEXTE CORROMPU DE L\'API:');
console.log('WOO corrompu:', corruptedText);
console.log('BIO corrompu:', corruptedBio);
console.log('');

console.log('2. TEXTE NORMAL (ATTENDU):');
console.log('WOO normal:', normalText);
console.log('BIO normal:', normalBio);
console.log('');

console.log('3. EXTRACTION AVEC TEXTE CORROMPU:');
console.log('WOO corrompu ->', JSON.stringify(extractBaseFromNotice(corruptedText), null, 2));
console.log('BIO corrompu ->', JSON.stringify(extractBaseFromNotice(corruptedBio), null, 2));
console.log('');

console.log('4. EXTRACTION AVEC TEXTE NORMAL:');
console.log('WOO normal ->', JSON.stringify(extractBaseFromNotice(normalText), null, 2));
console.log('BIO normal ->', JSON.stringify(extractBaseFromNotice(normalBio), null, 2));
console.log('');

console.log('5. ANALYSE DU PROBL√àME:');
console.log('‚úÖ L\'extracteur fonctionne parfaitement avec du texte normal');
console.log('‚ùå L\'extracteur √©choue avec le texte corrompu de l\'API');
console.log('üö® PROBL√àME: L\'API Bithumb retourne du texte encod√© incorrectement');
console.log('');

console.log('6. IMPACT SUR LE BOT:');
console.log('‚Ä¢ BIO n\'a pas √©t√© d√©tect√© √† cause de l\'encodage corrompu');
console.log('‚Ä¢ WOO n\'a pas √©t√© d√©tect√© √† cause de l\'encodage corrompu');
console.log('‚Ä¢ Tous les nouveaux listings sont affect√©s par ce bug');
console.log('‚Ä¢ Le bot passe en fallback T2 (WebSocket) moins fiable');
