#!/usr/bin/env ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const StructuredLogger_1 = require("../core/StructuredLogger");
const AdvancedTelegramService_1 = require("../notify/AdvancedTelegramService");
// Mock du TelegramService pour les tests
class MockTelegramService {
    sentMessages = [];
    async sendMessage(message) {
        this.sentMessages.push(message);
        console.log(`üì± [MOCK] Message Telegram envoy√©: ${message}`);
    }
    getSentMessages() {
        return this.sentMessages;
    }
    clearMessages() {
        this.sentMessages = [];
    }
}
async function testTelegramAlerts() {
    console.log('üß™ Test des Alertes Telegram Avanc√©es\n');
    // 1. Initialiser les composants
    const logger = new StructuredLogger_1.StructuredLogger(StructuredLogger_1.LogLevel.INFO);
    const mockTelegram = new MockTelegramService();
    const alertService = new AdvancedTelegramService_1.AdvancedTelegramService(mockTelegram, logger);
    console.log('‚úÖ Composants initialis√©s');
    // 2. Tester les r√®gles d'alerte par d√©faut
    console.log('\nüìã Regles d\'alerte par defaut:');
    const defaultRules = alertService.getAlertStats();
    console.log(JSON.stringify(defaultRules, null, 2));
    // 3. Ajouter des r√®gles personnalis√©es
    alertService.addAlertRule({
        id: 'high_memory',
        name: 'M√©moire √©lev√©e',
        type: AdvancedTelegramService_1.AlertType.PERFORMANCE,
        priority: AdvancedTelegramService_1.AlertPriority.HIGH,
        condition: (data) => data.memoryUsage > 80,
        message: '‚ö†Ô∏è Utilisation m√©moire √©lev√©e: {memoryUsage}%',
        cooldownMs: 300000, // 5 minutes
        enabled: true
    });
    alertService.addAlertRule({
        id: 'api_error_rate',
        name: 'Taux d\'erreur API √©lev√©',
        type: AdvancedTelegramService_1.AlertType.ERROR,
        priority: AdvancedTelegramService_1.AlertPriority.CRITICAL,
        condition: (data) => data.errorRate > 10,
        message: 'üö® Taux d\'erreur API critique: {errorRate}%',
        cooldownMs: 60000, // 1 minute
        enabled: true
    });
    console.log('‚úÖ R√®gles personnalis√©es ajout√©es');
    // 4. D√©clencher des alertes
    console.log('\nüö® D√©clenchement d\'alertes:');
    // Alerte m√©moire (devrait se d√©clencher)
    alertService.triggerAlert('high_memory', { memoryUsage: 85 });
    console.log('‚úÖ Alerte m√©moire d√©clench√©e');
    // Alerte API (devrait se d√©clencher)
    alertService.triggerAlert('api_error_rate', { errorRate: 15 });
    console.log('‚úÖ Alerte API d√©clench√©e');
    // Alerte m√©moire encore (devrait √™tre ignor√©e √† cause du cooldown)
    alertService.triggerAlert('high_memory', { memoryUsage: 90 });
    console.log('‚úÖ Alerte m√©moire r√©p√©t√©e (devrait √™tre ignor√©e)');
    // 5. Attendre le traitement de la queue
    console.log('\n‚è≥ Attente du traitement de la queue...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    // 6. V√©rifier les messages envoy√©s
    console.log('\nüì± Messages Telegram envoy√©s:');
    const sentMessages = mockTelegram.getSentMessages();
    console.log(`Total: ${sentMessages.length} messages`);
    sentMessages.forEach((msg, index) => {
        console.log(`${index + 1}. ${msg}`);
    });
    // 7. Tester l'acquittement d'alertes
    console.log('\n‚úÖ Test d\'acquittement:');
    const alertStats = alertService.getAlertStats();
    console.log('Statistiques avant acquittement:', JSON.stringify(alertStats, null, 2));
    // Acquitter une alerte
    if (alertStats.totalAlerts > 0) {
        const firstAlertId = Object.keys(alertStats.alertsByPriority)[0];
        if (firstAlertId) {
            const acknowledged = alertService.acknowledgeAlert(firstAlertId, 'test-user');
            console.log(`Alerte ${firstAlertId} acquittee: ${acknowledged}`);
        }
    }
    // 8. Nettoyage des anciennes alertes
    console.log('\nüßπ Nettoyage des anciennes alertes:');
    alertService.cleanupOldAlerts(1); // 1 heure
    const finalStats = alertService.getAlertStats();
    console.log('Statistiques finales:', JSON.stringify(finalStats, null, 2));
    // 9. Nettoyage
    alertService.stop();
    logger.info('Test des alertes Telegram termin√© avec succ√®s');
    console.log('\nüéâ Test des alertes Telegram termin√© !');
}
// Gestion des erreurs
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});
process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});
// Lancer le test
testTelegramAlerts().catch(console.error);
//# sourceMappingURL=test-telegram-alerts.js.map