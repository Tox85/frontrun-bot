#!/usr/bin/env ts-node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixPerpCatalog = fixPerpCatalog;
const sqlite3_1 = require("sqlite3");
const path_1 = require("path");
async function fixPerpCatalog() {
    console.log('üîß Correction du sch√©ma perp_catalog...');
    const dbPath = (0, path_1.join)(process.cwd(), 'data', 'bot.db');
    const db = new sqlite3_1.Database(dbPath);
    return new Promise((resolve, reject) => {
        db.serialize(() => {
            // V√©rifier le sch√©ma actuel
            db.all("PRAGMA table_info(perp_catalog)", (err, columns) => {
                if (err) {
                    console.error('‚ùå Erreur lors de la v√©rification du sch√©ma:', err);
                    reject(err);
                    return;
                }
                console.log('üìã Sch√©ma actuel de perp_catalog:');
                columns.forEach((col) => {
                    console.log(`  - ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
                });
                const hasLeverageMax = columns.some((col) => col.name === 'leverage_max');
                if (hasLeverageMax) {
                    console.log('‚úÖ Colonne leverage_max d√©j√† pr√©sente!');
                    resolve();
                    return;
                }
                console.log('‚ùå Colonne leverage_max manquante - ajout en cours...');
                // Ajouter la colonne leverage_max
                db.run('ALTER TABLE perp_catalog ADD COLUMN leverage_max REAL DEFAULT 100', (err) => {
                    if (err) {
                        console.error('‚ùå Erreur lors de l\'ajout de la colonne leverage_max:', err);
                        reject(err);
                        return;
                    }
                    console.log('‚úÖ Colonne leverage_max ajout√©e!');
                    // Mettre √† jour les enregistrements existants
                    db.run('UPDATE perp_catalog SET leverage_max = 100 WHERE leverage_max IS NULL', (err) => {
                        if (err) {
                            console.error('‚ùå Erreur lors de la mise √† jour des enregistrements:', err);
                            reject(err);
                            return;
                        }
                        console.log('‚úÖ Enregistrements existants mis √† jour avec leverage_max = 100');
                        // V√©rifier le nouveau sch√©ma
                        db.all("PRAGMA table_info(perp_catalog)", (err, newColumns) => {
                            if (err) {
                                console.error('‚ùå Erreur lors de la v√©rification du nouveau sch√©ma:', err);
                                reject(err);
                                return;
                            }
                            console.log('\nüìã Nouveau sch√©ma de perp_catalog:');
                            newColumns.forEach((col) => {
                                console.log(`  - ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.pk ? 'PRIMARY KEY' : ''}`);
                            });
                            // Test d'insertion
                            const testData = {
                                exchange: 'TEST',
                                base: 'TEST',
                                symbol: 'TESTUSDT',
                                leverageMax: 50,
                                updatedAt: new Date().toISOString()
                            };
                            db.run('INSERT OR REPLACE INTO perp_catalog (exchange, base, symbol, leverage_max, updated_at_utc) VALUES (?, ?, ?, ?, ?)', [testData.exchange, testData.base, testData.symbol, testData.leverageMax, testData.updatedAt], function (err) {
                                if (err) {
                                    console.error('‚ùå Test d\'insertion √©chou√©:', err);
                                    reject(err);
                                    return;
                                }
                                console.log('‚úÖ Test d\'insertion r√©ussi!');
                                // Nettoyer le test
                                db.run('DELETE FROM perp_catalog WHERE exchange = ?', ['TEST'], (err) => {
                                    if (err) {
                                        console.error('‚ö†Ô∏è Erreur lors du nettoyage du test:', err);
                                    }
                                    else {
                                        console.log('üßπ Donn√©es de test nettoy√©es');
                                    }
                                    console.log('\nüéâ Sch√©ma perp_catalog corrig√© avec succ√®s!');
                                    resolve();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
}
// Ex√©cuter si appel√© directement
if (require.main === module) {
    fixPerpCatalog()
        .then(() => {
        console.log('‚úÖ Script termin√© avec succ√®s');
        process.exit(0);
    })
        .catch((error) => {
        console.error('‚ùå Script √©chou√©:', error);
        process.exit(1);
    });
}
//# sourceMappingURL=fix-perp-catalog.js.map